<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>語靈之境：古古長老與部落之聲</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+TC:wght@400;700&display=swap" rel="stylesheet">
    <!-- Application Structure Plan: 
        Structure: Single-page application with a main content area dynamically updated. Header displays game/chapter title. Content area shows scene descriptions, narrator text, character dialogue. Interactive choices are presented as buttons.
        User Flow: Linear progression driven by a "Next" button (for narration/dialogue without immediate choices) or by making choices. Choices can lead to different narrative paths or unlock content. Game state is managed in JavaScript to track progress and effects of choices.
        Reasoning: This structure is common for visual novels, providing a clear and focused reading experience. Dynamic content updates keep the user engaged in the narrative. Storing the story as a graph of nodes allows for easy branching and state management.
    -->
    <!-- Visualization & Content Choices: 
        Report Info (Narrative Script) -> Goal (Interactive Storytelling)
        - Scene Descriptions/Narration: Text block -> Inform/Set Scene -> Displayed in a dedicated area -> JS updates content -> Clear narrative flow. (HTML/CSS/JS)
        - Dialogue: Character Name + Text -> Convey Character/Plot -> Styled text blocks -> JS updates content -> Differentiates speakers. (HTML/CSS/JS)
        - Choices (選項): List of options -> Player Agency/Branching -> Clickable buttons -> JS handles choice logic, updates state, loads next node -> Core interactive mechanic. (HTML/CSS/JS)
        - Branching Outcomes (e.g., 解鎖語靈井歷史片段): Text/State Change -> Show Consequence/Reward -> Update narrative/game state -> JS manages state and displays relevant content -> Provides depth. (JS state management)
        - Visual Elements (e.g., "光芒從井中射出"): Descriptive text -> Enhance Immersion -> Displayed as narrative text -> JS. (No actual graphics, relying on text.)
        - LLM Integration (Chapter 5): User input for rewrite suggestions -> LLM generates creative prompts/suggestions -> Displayed in a dedicated section -> Uses Gemini API for dynamic content generation -> Enhances creative interaction.
        - Background Images: Dynamic background images for different scenes to enhance visual storytelling. Implemented using CSS classes dynamically added/removed by JavaScript.
        CONFIRMATION: NO SVG graphics used. NO Mermaid JS used.
    -->
    <style>
        body {
            font-family: 'Noto Sans TC', sans-serif;
            background-size: cover; /* 圖片覆蓋整個背景 */
            background-position: center; /* 圖片置中 */
            background-repeat: no-repeat; /* 圖片不重複 */
            transition: background-image 1s ease-in-out; /* 背景圖片切換時的淡入淡出效果 */
            background-attachment: fixed; /* 背景圖片固定，不隨滾動條滾動 */
        }
        .dialogue-text-paragraph {
            white-space: pre-wrap;
        }
        #content-area::-webkit-scrollbar {
            width: 8px;
        }
        #content-area::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-radius: 10px;
        }
        #content-area::-webkit-scrollbar-thumb {
            background: #888;
            border-radius: 10px;
        }
        #content-area::-webkit-scrollbar-thumb:hover {
            background: #555;
            cursor: pointer; /* Add pointer cursor on hover */
        }

        /* 背景圖片樣式定義 */
        .bg-well {
            background-image: url('https://placehold.co/1920x1080/2C3E50/E0F2F7?text=語靈之井'); /* 語靈之井 */
        }
        .bg-highlands {
            background-image: url('https://placehold.co/1920x1080/34495E/A2D9CE?text=星樹高原'); /* 星樹高原 */
        }
        .bg-floating-island {
            background-image: url('https://placehold.co/1920x1080/1ABC9C/D5F5E3?text=水餃浮島'); /* 水餃浮島 */
        }
        .bg-black-mist {
            background-image: url('https://placehold.co/1920x1080/212F3C/F2F4F4?text=黑霧盆地'); /* 黑霧盆地 */
        }
        .bg-glowing-forest {
            background-image: url('https://placehold.co/1920x1080/283747/D6EAF8?text=幽光密林'); /* 幽光密林 */
        }
        .bg-star-table {
            background-image: url('https://placehold.co/1920x1080/4A235A/E8DAEF?text=星光圓桌'); /* 星光圓桌 */
        }
        .bg-reboot {
            background-image: url('https://placehold.co/1920x1080/1A202C/A0AEC0?text=語靈重啟'); /* 語靈重啟/星空 */
        }
        /* 預設背景，如果沒有指定背景 class，則使用漸變色 */
        .bg-default {
            background-image: none;
            background: linear-gradient(to bottom right, #eff6ff, #e0e7ff); /* 淺藍到淡靛藍漸變 */
        }

        /* 調整 app-container 的背景為半透明，讓後面的 body 背景圖片透出來 */
        #app-container {
            background-color: rgba(255, 255, 255, 0.85); /* 85% 不透明度的白色 */
        }
    </style>
</head>
<body class="bg-default flex items-center justify-center min-h-screen p-2 sm:p-4">

    <div id="app-container" class="w-full max-w-2xl lg:max-w-3xl shadow-2xl rounded-lg overflow-hidden">
        <header id="game-header" class="p-4 sm:p-6 bg-indigo-700 text-white text-center">
            <h1 id="game-title" class="text-2xl sm:text-3xl md:text-4xl font-bold">語靈之境：古古長老與部落之聲</h1>
            <h2 id="chapter-title" class="text-lg sm:text-xl md:text-2xl mt-1 text-indigo-200"></h2>
        </header>

        <main id="content-area" class="p-4 sm:p-6 md:p-8 min-h-[300px] sm:min-h-[350px] md:min-h-[400px] max-h-[70vh] overflow-y-auto">
            <div id="intro-text-area" class="mb-4 text-gray-700 text-center p-3 bg-indigo-50 rounded-md text-lg sm:text-xl"></div>
            <div id="scene-description-area" class="mb-4 text-gray-600 italic text-lg sm:text-xl"></div>
            <div id="narration-area" class="mb-4 text-gray-700 text-lg sm:text-xl"></div>
            
            <div id="dialogue-section" class="mb-4 hidden">
                <div id="character-info" class="mb-1">
                    <span id="character-name" class="text-purple-700 font-semibold text-xl sm:text-2xl"></span>
                    <span id="character-note" class="text-purple-500 italic text-base sm:text-lg ml-2"></span>
                </div>
                <div id="dialogue-text" class="text-gray-800 p-3 bg-gray-50 rounded-md dialogue-text-paragraph text-xl sm:text-2xl"></div>
            </div>

            <div id="llm-rewrite-section" class="mb-4 hidden p-4 bg-gray-50 rounded-md shadow-inner text-lg sm:text-xl">
                <p id="llm-prompt-text" class="mb-3 text-gray-700"></p>
                <textarea id="rewrite-input" class="w-full p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-400 text-base sm:text-lg" rows="4" placeholder="輸入您的重構建議..."></textarea>
                <button id="generate-rewrite-button" class="mt-4 px-6 py-3 bg-green-600 text-white rounded-lg shadow hover:bg-green-700 transition-colors duration-150 text-lg sm:text-xl w-full">✨ 獲取重構靈感 ✨</button>
                <div id="rewrite-response-area" class="mt-6 p-4 bg-white border border-gray-200 rounded-md hidden">
                    <p class="text-gray-600 mb-2">重構靈感：</p>
                    <div id="rewrite-suggestions" class="text-gray-800"></div>
                    <div id="loading-indicator" class="text-center text-blue-500 hidden mt-4">載入中...</div>
                </div>
            </div>

            <div id="choices-area" class="mt-6 flex flex-col sm:flex-row sm:space-x-4 space-y-3 sm:space-y-0 justify-center">
                </div>

            <div id="end-card-area" class="text-center text-3xl sm:text-4xl font-bold text-indigo-700 hidden py-10"></div>
        </main>

        <footer id="navigation-area" class="p-4 sm:p-6 text-center border-t border-gray-200 flex flex-col sm:flex-row justify-center items-center space-y-3 sm:space-y-0 sm:space-x-4">
            <button id="next-button" class="px-6 py-3 bg-blue-600 text-white rounded-lg shadow hover:bg-blue-700 transition-colors duration-150 hidden text-lg sm:text-xl">繼續 →</button>
            <button id="restart-button" class="px-6 py-3 bg-red-600 text-white rounded-lg shadow hover:bg-red-700 transition-colors duration-150 text-lg sm:text-xl hidden">重新遊戲 🔄</button>
        </footer>
    </div>

    <script>
        const storyData = [
            { id: "0_intro", type: "intro_text", text: "歡迎來到《語靈之境：古古長老與部落之聲》互動故事。\n您的選擇將引導故事的發展。\n點擊選項或「繼續」按鈕來推進劇情。", next: "1_1", backgroundClass: "bg-default" }, // 初始頁面使用漸變背景
            // 章節一
            { id: "1_1", type: "title_card", chapterTitle: "【章節一：語靈之井的低語】", sceneDescription: "夜色低垂，滿天星斗。畫面聚焦於一口幽深古井，井口刻有奇異圖騰，微光閃爍。", next: "1_2", backgroundClass: "bg-well" },
            { id: "1_2", type: "narration", text: "在這個逐漸遺忘故事的世界中，有一口井仍然記得所有被說過與未曾說出的聲音。這裡是——語靈之井。", next: "1_3", backgroundClass: "bg-well" },
            { id: "1_3", type: "dialogue", character: "古古長老", character_note: "（站在井邊，神情凝重而慈祥）", line: "語靈正在沉睡，而世界也逐漸失去了想像與連結。是時候召喚新的說書者了……", next: "1_4", backgroundClass: "bg-well" },
            { id: "1_4", type: "narration", text: "（光芒從井中射出，畫面轉為四道光芒射向四個部落，象徵著召喚的開始）", next: "1_5_choice", backgroundClass: "bg-well" },
            {
                id: "1_5_choice", type: "choice", backgroundClass: "bg-well",
                options: [
                { text: "啟動召喚儀式", next: "1_ritual_start", effect_description: "古古長老開始準備召喚儀式。" },
                { text: "先回憶過去的故事", next: "1_history_start", effect: { unlock: "well_history" }, effect_description: "你選擇先了解語靈之井的過去。" }
                ]
            },
            { id: "1_ritual_start", type: "narration", text: "古古長老站在井邊，口中唸誦著古老的咒文，準備啟動召喚四方部落代表的儀式。", next: "2_1_intro", backgroundClass: "bg-well" },
            { id: "1_history_start", type: "narration", text: "（一段關於語靈之井的神秘歷史在你腦海中浮現：這口井是世界的記憶核心，連接著所有生靈的意識與故事源流。但隨著時間流逝，人們漸漸遺忘，井的力量也隨之衰退。）", unlockedContent: "well_history", next: "1_ritual_start_after_history", backgroundClass: "bg-well" },
            { id: "1_ritual_start_after_history", type: "narration", text: "了解了井的歷史後，古古長老深吸一口氣，開始了召喚儀式。", next: "2_1_intro", backgroundClass: "bg-well" },

            // 章節二
            { id: "2_1_intro", type: "title_card", chapterTitle: "【章節二：四部落的呼應】", sceneDescription: "古古長老的召喚穿越時空，四方部落中，被選中的人感受到了這股力量。", next: "2_2_jinling_scene", backgroundClass: "bg-default" }, // 切換到通用背景
            { id: "2_2_jinling_scene", type: "narration", text: "【金零部落 · 星樹高原】", next: "2_3_shiling_dialogue", backgroundClass: "bg-highlands" },
            { id: "2_3_shiling_dialogue", type: "dialogue", character: "時嶺", character_note: "（手撫古老星樹，感受其脈動）", line: "老木的根鬚深沉地顫動了，那是古老而清晰的呼喚……語靈之井的召喚！我必須前往，為星樹高原帶來新的故事。", next: "2_4_sanjiaoshan_scene", backgroundClass: "bg-highlands" },
            { id: "2_4_sanjiaoshan_scene", type: "narration", text: "【弎餃汕部落 · 水餃浮島】", next: "2_5_ajiao_dialogue", backgroundClass: "bg-floating-island" },
            { id: "2_5_ajiao_dialogue", type: "dialogue", character: "阿餃大王", character_note: "（正在熟練地包餃子，突然停下動作）", line: "咦？這餃子皮上竟浮現出閃爍的光點，組合成一張地圖！？這可不是普通的午餐挑戰，看來我的餃子王國又有新冒險了！", next: "2_6_shijie_scene", backgroundClass: "bg-floating-island" },
            { id: "2_6_shijie_scene", type: "narration", text: "【噬界族 · 黑霧盆地】", next: "2_7_shijie_elder_dialogue", backgroundClass: "bg-black-mist" },
            { id: "2_7_shijie_elder_dialogue", type: "dialogue", character: "大長老", character_note: "（注視著盆地中央跳動的靈火，眼神深邃）", line: "靈魂的低語在黑霧中迴盪……語靈之井的召喚，意味著我們必須面對那些被遺忘、被吞噬的未竟之事。", next: "2_8_xuanfeng_scene", backgroundClass: "bg-black-mist" },
            { id: "2_8_xuanfeng_scene", type: "narration", text: "【玄蜂部落 · 幽光密林】", next: "2_9_toudao_dialogue", backgroundClass: "bg-glowing-forest" },
            { id: "2_9_toudao_dialogue", type: "dialogue", character: "偷叨", character_note: "（閃身於林間，身影輕盈而迅速）", line: "如果是故事的力量，那它必定是世上最珍貴的寶藏。我願意前往傾聽……並將那些被遺忘的，輕巧地『偷』回來。", next: "2_10_choice", backgroundClass: "bg-glowing-forest" },
            {
                id: "2_10_choice", type: "choice", backgroundClass: "bg-default", // 選項頁面回到通用背景
                options: [
                { text: "立即集合四人", next: "2_gather_now", effect_description: "四位代表決定立即前往語靈之境。" },
                { text: "各自完成個人小任務", next: "2_personal_quests_start", effect: { unlock: "character_backstories" }, effect_description: "四位代表決定先完成一些個人準備。" }
                ]
            },
            { id: "2_gather_now", type: "narration", text: "四位天選之人，帶著各自部落的期望與自身的信念，動身前往語靈之井的所在地——語靈之境。", next: "3_1_intro", backgroundClass: "bg-default" },
            { id: "2_personal_quests_start", type: "narration", text: "（四位代表在前往語靈之境前，各自經歷了一些小插曲，讓他們更堅定了自己的信念，並回憶起重要的過往。這些經歷將在未來的旅程中影響他們。）", unlockedContent: "character_backstories", next: "2_gather_now_after_quests", backgroundClass: "bg-default" },
            { id: "2_gather_now_after_quests", type: "narration", text: "完成了各自的準備後，四人終於踏上了前往語靈之境的旅途。", next: "3_1_intro", backgroundClass: "bg-default" },
            
            // 章節三
            { id: "3_1_intro", type: "title_card", chapterTitle: "【章節三：任務卡 I《思辨之風》】", sceneDescription: "語靈之境的星光圓桌，四人齊聚，面前浮現第一張任務卡，散發著柔和的光芒。", next: "3_2_task_prompt", backgroundClass: "bg-star-table" },
            { id: "3_2_task_prompt", type: "narration", text: "【任務提示】\n「從古典文本中，找到分歧與觀點的火種，點燃思辨之風。」", next: "3_3_gugu_elder_dialogue", backgroundClass: "bg-star-table" },
            { id: "3_3_gugu_elder_dialogue", type: "dialogue", character: "古古長老", character_note: "（聲音沉穩而富有引導性）", line: "第一道試煉，來自《刑天舞干戚》──刑天，是魯莽之徒，還是知其不可為而為之的英雄？", next: "3_4_choice", backgroundClass: "bg-star-table" },
            {
                id: "3_4_choice", type: "choice", backgroundClass: "bg-star-table",
                options: [
                { text: "他是勇者", next: "3_outcome_brave", effect_description: "你認為刑天是反抗命運、堅持自我的勇者。" },
                { text: "他是愚者", next: "3_outcome_fool", effect: { trust_change: "fool_stance" }, effect_description: "你認為刑天是固執己見、不知變通的愚者。" },
                { text: "他是悲劇之人", next: "3_outcome_tragic", effect: { trust_change: "tragic_stance" }, effect_description: "你認為刑天是命運與責任交錯下的悲劇英雄。" }
                ]
            },
            { id: "3_outcome_brave", type: "narration", text: "（你的選擇在團隊中激起了關於勇氣與宿命的討論。這微妙地影響了角色間的信任與未來的對話風格。）", next: "4_1_intro", backgroundClass: "bg-default" },
            { id: "3_outcome_fool", type: "narration", text: "（你的選擇讓團隊開始思考智慧與審慎的界線。這微妙地影響了角色間的信任與未來的對話風格。）", next: "4_1_intro", backgroundClass: "bg-default" },
            { id: "3_outcome_tragic", type: "narration", text: "（你的選擇引導團隊一同感受了命運的沉重與個人意志的無奈。這微妙地影響了角色間的信任與未來的對話風格。）", next: "4_1_intro", backgroundClass: "bg-default" },

            // 章節四
            { id: "4_1_intro", type: "title_card", chapterTitle: "【章節四：任務卡 II《創世之夜》】", sceneDescription: "四人依照部落神話召喚各自的守護神，場景壯麗而充滿神聖感。", next: "4_2_summons_scene", backgroundClass: "bg-default" },
            { id: "4_2_summons_scene", type: "narration", text: "【畫面】\n金零部落召喚老木，巨大星樹拔地而起，樹冠環繞著閃爍的星靈泉，光芒萬丈。\n弎餃汕召喚水餃奶奶，蒸氣從地面升騰，逐漸凝聚成慈祥的水餃奶奶形象，周圍形成星辰模樣的餃子。\n噬界族召喚黑影之眼，深邃的黑影在空中凝聚成一隻巨大的眼睛，吞吐著過往的記憶碎片，顯得神秘而古老。\n玄蜂部落召喚語蜂精靈，無數微小的語蜂精靈在空中飛舞，匯聚成一道流光，傳遞著未來的預言，輕盈而充滿智慧。", next: "4_3_task_prompt", backgroundClass: "bg-default" },
            { id: "4_3_task_prompt", type: "narration", text: "【任務提示】\n「創造不只是憶起，而是決定：你們將守護何種價值？」", next: "4_4_choice", backgroundClass: "bg-default" },
            {
                id: "4_4_choice", type: "choice", backgroundClass: "bg-default",
                options: [
                { text: "守護真相", next: "4_outcome_truth", effect: { unlock_ability: "ghost_debuff_vision" }, effect_description: "你們選擇守護真相，將被賦予看穿虛假的力量。" },
                { text: "守護創意", next: "4_outcome_creativity", effect: { buff: "monster_resistance" }, effect_description: "你們選擇守護創意，這將增強你們面對某些奇異存在的抵抗力。" },
                { text: "守護連結", next: "4_outcome_connection", effect: { system_enhancement: "ally_support" }, effect_description: "你們選擇守護連結，盟友之間的支援系統將得到強化。" }
                ]
            },
            { id: "4_outcome_truth", type: "narration", text: "（你們選擇守護真相。一股清澈的力量流淌在你們之間，未來在面對虛假與迷惑時，你們將更容易洞悉本質。）", next: "5_1_intro", backgroundClass: "bg-default" },
            { id: "4_outcome_creativity", type: "narration", text: "（你們選擇守護創意。一股靈動的能量環繞著你們，這讓你們在面對僵化思維或奇異的「手機怪」時，更具抵抗力。）", next: "5_1_intro", backgroundClass: "bg-default" },
            { id: "4_outcome_connection", type: "narration", text: "（你們選擇守護連結。彼此間的默契與信任加深，盟友支援系統得到強化，未來合作將更加順暢。）", next: "5_1_intro", backgroundClass: "bg-default" },

            // 章節五
            { id: "5_1_intro", type: "title_card", chapterTitle: "【章節五：任務卡 III《重構之織》】", sceneDescription: "一位神秘的AI咒師登場，其形象充滿未來科技感。祂將引導角色們以咒語「Rewrite」重構古老的故事。", next: "5_2_ai_dialogue", backgroundClass: "bg-default" },
            { id: "5_2_ai_dialogue", type: "dialogue", character: "AI咒師", character_note: "（聲音合成而富有磁性）", line: "來，說出你們的語靈密語——將《李娃傳》重織，讓舊事變為新魂。", next: "5_interactive_rewrite", backgroundClass: "bg-default" },
            {
                id: "5_interactive_rewrite",
                type: "llm_interaction",
                prompt_text: "請輸入您對《李娃傳》重構的建議或關鍵詞（例如：現代創業家、未來都市、科幻愛情）：",
                llm_button_text: "✨ 獲取重構靈感 ✨",
                llm_prompt_base: "請根據以下建議，為中國古典故事《李娃傳》提供3個現代重構的創意靈感。請簡要說明每個靈感的核心概念和可能的現代角色設定。建議：",
                next: "5_4_process_narrative",
                backgroundClass: "bg-default"
            },
            { id: "5_4_process_narrative", type: "narration", text: "（四人小組開始嘗試運用AI咒師提供的工具，對《李娃傳》進行了富有創意的改編與重述。）", next: "5_5_branch_impact_description", backgroundClass: "bg-default"},
            { id: "5_5_branch_impact_description", type: "narration", text: "【分支影響】\nAI咒師提示：若你們重構的文本能與角色精神巧妙融合，展現出故事的新生命力，便有機會解鎖語靈之井更深層的秘密。", next: "5_6_outcome_placeholder", backgroundClass: "bg-default" },
            { id: "5_6_outcome_placeholder", type: "narration", text: "（經過一番努力，你們成功地將《李娃傳》重構成一個充滿現代氣息又不失原作神髓的新故事。AI咒師對你們的創意表示讚賞，語靈之井似乎也因此而有所回應，一絲更深層的奧秘被揭示了。）", effect: {unlock: "deep_well_secrets"}, next: "6_1_intro", backgroundClass: "bg-default" },


            // 章節六
            { id: "6_1_intro", type: "title_card", chapterTitle: "【章節六：任務卡 IV《播種之旅》】", sceneDescription: "經歷了重構故事的洗禮，四位說書人現在需要將他們的故事傳播出去。他們各自選擇了不同的方式：Podcast、影片、立體書或動畫短片。", next: "6_2_narration", backgroundClass: "bg-default" },
            { id: "6_2_narration", type: "narration", text: "【旁白】\n「播種，不是為了收成，而是相信故事能自己長出翅膀。」", next: "6_3_choice", backgroundClass: "bg-default" },
            {
                id: "6_3_choice", type: "choice", backgroundClass: "bg-default",
                options: [
                { text: "將作品分享給語靈之井", next: "6_outcome_share_well", effect: { ending_type: "legacy" }, effect_description: "你們決定將新生的故事回饋給語靈之井，完成傳承。" },
                { text: "將作品留在部落", next: "6_outcome_share_tribe", effect: { ending_type: "epilogue_tribe" }, effect_description: "你們決定將故事帶回各自的部落，播撒新的種子。" }
                ]
            },
            { id: "6_outcome_share_well", type: "narration", text: "（你們將精心創作的作品分享給了語靈之井。井水泛起溫柔的漣漪，彷彿在感謝你們為世界重新注入了故事的活力。這是一次圓滿的傳承。）", next: "7_1_intro", backgroundClass: "bg-default" },
            { id: "6_outcome_share_tribe", type: "narration", text: "（你們選擇將故事帶回各自的部落。族人們被新奇的敘事方式所吸引，故事的種子在他們心中生根發芽，為部落的未來開啟了充滿想像力的新篇章。）", next: "7_1_intro", backgroundClass: "bg-default" },

            // 終章
            { id: "7_1_intro", type: "title_card", chapterTitle: "【終章：語靈重啟】", sceneDescription: "語靈之井恢復了往日的澄澈與活力，水面波光粼粼，映照著星空。古古長老欣慰地笑著，將象徵守護者身份的語靈權杖交給了四位年輕的說書人。", next: "7_2_gugu_final_dialogue", backgroundClass: "bg-reboot" },
            { id: "7_2_gugu_final_dialogue", type: "dialogue", character: "古古長老", character_note: "（欣慰地看著四位年輕的說書者）", line: "語靈之境，從今以後，由你們守護——也由你們延續。", next: "7_3_ending_quote_scene", backgroundClass: "bg-reboot" },
            { id: "7_3_ending_quote_scene", type: "narration", text: "【畫面漸黑，出現金句】\n「說故事的力量，不在於你記得多少，而在於你是否選擇說出屬於你的聲音。」", next: "END", backgroundClass: "bg-reboot" },
            { id: "END", type: "end_card", text: "《語靈之境：古古長老與部落之聲》\n劇終", backgroundClass: "bg-reboot" }
        ];

        let gameState = {
            currentNodeId: "0_intro",
            unlocked: {},
            playerChoices: {}
        };

        const chapterTitleEl = document.getElementById('chapter-title');
        const sceneDescriptionAreaEl = document.getElementById('scene-description-area');
        const narrationAreaEl = document.getElementById('narration-area');
        const dialogueSectionEl = document.getElementById('dialogue-section');
        const characterNameEl = document.getElementById('character-name');
        const characterNoteEl = document.getElementById('character-note');
        const dialogueTextEl = document.getElementById('dialogue-text');
        const choicesAreaEl = document.getElementById('choices-area');
        const nextButtonEl = document.getElementById('next-button');
        const restartButtonEl = document.getElementById('restart-button');
        const endCardAreaEl = document.getElementById('end-card-area');
        const introTextAreaEl = document.getElementById('intro-text-area');
        const contentAreaEl = document.getElementById('content-area');

        const llmRewriteSectionEl = document.getElementById('llm-rewrite-section');
        const llmPromptTextEl = document.getElementById('llm-prompt-text');
        const rewriteInputEl = document.getElementById('rewrite-input');
        const generateRewriteButtonEl = document.getElementById('generate-rewrite-button');
        const rewriteResponseAreaEl = document.getElementById('rewrite-response-area');
        const rewriteSuggestionsEl = document.getElementById('rewrite-suggestions');
        const loadingIndicatorEl = document.getElementById('loading-indicator');


        function clearContent() {
            introTextAreaEl.classList.add('hidden');
            introTextAreaEl.textContent = '';
            sceneDescriptionAreaEl.textContent = '';
            narrationAreaEl.textContent = '';
            dialogueSectionEl.classList.add('hidden');
            characterNameEl.textContent = '';
            characterNoteEl.textContent = '';
            dialogueTextEl.textContent = '';
            choicesAreaEl.innerHTML = '';
            nextButtonEl.classList.add('hidden');
            endCardAreaEl.classList.add('hidden');
            llmRewriteSectionEl.classList.add('hidden');
            llmPromptTextEl.textContent = '';
            rewriteInputEl.value = '';
            rewriteResponseAreaEl.classList.add('hidden');
            rewriteSuggestionsEl.innerHTML = '';
            loadingIndicatorEl.classList.add('hidden');
            restartButtonEl.classList.add('hidden');
            
            // 移除所有舊的背景 class，除了 bg-default (如果有的話)
            document.body.className = document.body.className.split(' ').filter(c => !c.startsWith('bg-') || c === 'bg-default').join(' ');
        }

        function renderNode(nodeId) {
            const node = storyData.find(n => n.id === nodeId);
            if (!node) {
                console.error("Node not found:", nodeId);
                return;
            }

            clearContent();
            contentAreaEl.scrollTop = 0;

            // 設定背景圖片 class
            if (node.backgroundClass) {
                document.body.classList.add(node.backgroundClass);
            } else {
                // 如果沒有指定背景 class，則確保使用預設漸變背景
                document.body.classList.add('bg-default');
            }

            if (node.type === "intro_text") {
                introTextAreaEl.classList.remove('hidden');
                introTextAreaEl.textContent = node.text;
                nextButtonEl.classList.remove('hidden');
                nextButtonEl.onclick = () => advanceStory(node.next);
            } else if (node.type === "title_card") {
                chapterTitleEl.textContent = node.chapterTitle;
                sceneDescriptionAreaEl.textContent = node.sceneDescription;
                if (node.next) {
                    nextButtonEl.classList.remove('hidden');
                    nextButtonEl.onclick = () => advanceStory(node.next);
                }
            } else if (node.type === "narration") {
                narrationAreaEl.innerHTML = node.text.replace(/\n/g, '<br>');
                if (node.next) {
                    nextButtonEl.classList.remove('hidden');
                    nextButtonEl.onclick = () => advanceStory(node.next);
                }
            } else if (node.type === "dialogue") {
                dialogueSectionEl.classList.remove('hidden');
                characterNameEl.textContent = node.character + "：";
                characterNoteEl.textContent = node.character_note || "";
                dialogueTextEl.textContent = node.line;
                if (node.next) {
                    nextButtonEl.classList.remove('hidden');
                    nextButtonEl.onclick = () => advanceStory(node.next);
                }
            } else if (node.type === "choice") {
                const choiceColors = ["bg-teal-600", "bg-blue-600", "bg-purple-600", "bg-indigo-600"];
                node.options.forEach((option, index) => {
                    const button = document.createElement('button');
                    const colorClass = choiceColors[index % choiceColors.length];
                    button.className = `w-full sm:w-auto sm:flex-1 text-left p-4 text-white rounded-md shadow hover:opacity-90 transition-colors duration-150 focus:outline-none focus:ring-2 focus:ring-opacity-75 ${colorClass} text-lg sm:text-xl`;
                    button.textContent = option.text;
                    button.onclick = () => handleChoice(node.id, index);
                    choicesAreaEl.appendChild(button);
                });
            } else if (node.type === "llm_interaction") {
                llmRewriteSectionEl.classList.remove('hidden');
                llmPromptTextEl.textContent = node.prompt_text;
                nextButtonEl.classList.remove('hidden');
                nextButtonEl.onclick = () => advanceStory(node.next);

                generateRewriteButtonEl.onclick = async () => {
                    const userSuggestion = rewriteInputEl.value.trim();
                    if (!userSuggestion) {
                        rewriteSuggestionsEl.innerHTML = '<p class="text-red-500">請輸入您的建議！</p>';
                        rewriteResponseAreaEl.classList.remove('hidden');
                        return;
                    }

                    loadingIndicatorEl.classList.remove('hidden');
                    rewriteResponseAreaEl.classList.add('hidden');
                    rewriteSuggestionsEl.innerHTML = '';

                    const prompt = `${node.llm_prompt_base} ${userSuggestion}`;
                    let chatHistory = [];
                    chatHistory.push({ role: "user", parts: [{ text: prompt }] });
                    const payload = { contents: chatHistory };
                    const apiKey = "";
                    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;

                    try {
                        const response = await fetch(apiUrl, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(payload)
                        });
                        const result = await response.json();

                        if (result.candidates && result.candidates.length > 0 &&
                            result.candidates[0].content && result.candidates[0].content.parts &&
                            result.candidates[0].content.parts.length > 0) {
                            const text = result.candidates[0].content.parts[0].text;
                            rewriteSuggestionsEl.innerHTML = text.replace(/\n/g, '<br>');
                            rewriteResponseAreaEl.classList.remove('hidden');
                        } else {
                            rewriteSuggestionsEl.innerHTML = '<p class="text-red-500">未能生成靈感，請再試一次。</p>';
                            rewriteResponseAreaEl.classList.remove('hidden');
                        }
                    } catch (error) {
                        console.error('Error calling Gemini API:', error);
                        rewriteSuggestionsEl.innerHTML = '<p class="text-red-500">發生錯誤，請檢查網路或稍後再試。</p>';
                        rewriteResponseAreaEl.classList.remove('hidden');
                    } finally {
                        loadingIndicatorEl.classList.add('hidden');
                    }
                };
            } else if (node.type === "end_card") {
                chapterTitleEl.textContent = "劇終";
                endCardAreaEl.classList.remove('hidden');
                endCardAreaEl.innerHTML = node.text.replace(/\n/g, '<br>');
                nextButtonEl.classList.add('hidden');
                restartButtonEl.classList.remove('hidden');
            }
            
            gameState.currentNodeId = nodeId;
        }

        function handleChoice(nodeId, choiceIndex) {
            const node = storyData.find(n => n.id === nodeId);
            const choice = node.options[choiceIndex];

            gameState.playerChoices[nodeId] = choice.text;
            if (choice.effect && choice.effect.unlock) {
                gameState.unlocked[choice.effect.unlock] = true;
            }

            if (choice.effect_description) {
                clearContent();
                narrationAreaEl.textContent = `（${choice.effect_description}）`;
                nextButtonEl.classList.remove('hidden');
                nextButtonEl.onclick = () => advanceStory(choice.next);
            } else {
                advanceStory(choice.next);
            }
        }

        function advanceStory(nextNodeId) {
            if (nextNodeId) {
                renderNode(nextNodeId);
            } else {
                console.warn("No next node defined for current state.");
            }
        }

        function restartGame() {
            gameState = {
                currentNodeId: "0_intro",
                unlocked: {},
                playerChoices: {}
            };
            renderNode(gameState.currentNodeId);
        }

        restartButtonEl.onclick = restartGame;

        function initGame() {
            renderNode(gameState.currentNodeId);
        }

        initGame();
    </script>
</body>
</html>
